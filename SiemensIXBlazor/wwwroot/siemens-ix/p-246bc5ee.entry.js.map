{"version":3,"names":["selectCss","IxSelectStyle0","Select","this","focusControllerCallbackBind","focusDropdownItem","bind","itemObserver","createMutationObserver","arrowFocusController","items","visibleNonShadowItems","nonShadowItems","Array","from","hostElement","querySelectorAll","filter","item","classList","contains","shadowItems","shadowRoot","visibleShadowItems","visibleItems","selectedItems","selected","addItemButton","querySelector","isSingleMode","mode","isMultipleMode","isEveryDropdownItemHidden","every","watchSelectedIndices","value","updateSelection","watchValue","selectedIndices","watchDropdownShow","show","ArrowFocusController","dropdownRef","wrap","editable","observe","childList","subtree","disconnect","undefined","onItemClicked","event","newId","detail","itemClick","index","navigationItem","length","nestedDropdownItem","_a","requestAnimationFrame","focus","oldValue","toggleValue","defaultPrevented","emitValueChange","emitAddItem","trim","addItem","emit","newItem","document","createElement","label","customItemsContainerRef","appendChild","clearInput","itemValue","isArray","includes","ids","forEach","some","i","toString","selectedLabels","map","inputValue","inputRef","valueChange","itemSelectionChange","componentDidLoad","addEventListener","dropdownShow","inputChange","componentWillLoad","onLabelChange","preventDefault","stopImmediatePropagation","disconnectedCallback","itemMutationObserver","itemExists","find","dropdownVisibilityChanged","select","removeHiddenFromItems","isDropdownEmpty","inputFilterText","onKeyDown","code","onArrowNavigation","onEnterNavigation","onItemClick","updatePosition","key","stopPropagation","activeElement","applyFocusTo","shift","isAddItemVisible","focusAddItemButton","moveUp","indexNonShadow","indexOf","pop","addItemRef","getDropdownItemElement","indexShadow","element","setTimeout","filterItemsWithTypeahead","remove","toLowerCase","add","clear","onInputBlur","e","target","placeholderValue","disabled","readonly","i18nPlaceholderEditable","i18nPlaceholder","render","h","Host","class","ref","dropdownAnchor","dropdownWrapperRef","onCloseClick","autocomplete","readOnly","type","allowClear","_b","placeholder","onBlur","onFocus","onInput","_c","icon","ghost","oval","size","onClick","closeBehavior","anchor","trigger","onShowChanged","placement","overwriteDropdownStyle","async","minWidth","clientWidth","hidden","hideListHeader","title","i18nSelectListHeader","i18nNoMatches","__decorate","OnListener","self"],"sources":["src/components/select/select.scss?tag=ix-select&encapsulation=shadow","src/components/select/select.tsx"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n@import 'common-variables';\n@import 'legacy/mixins/fonts';\n@import 'mixins/hover';\n@import 'mixins/text-truncation';\n@import 'mixins/shadow-dom/component';\n\n:host {\n  @include ix-component;\n\n  display: inline-block;\n  position: relative;\n  min-height: 2rem;\n  height: auto;\n  border-radius: var(--theme-input--border-radius);\n\n  .d-none {\n    display: none;\n  }\n\n  .select {\n    position: relative;\n    display: flex;\n    align-items: center;\n    background-color: var(--theme-input--background);\n    border: var(--theme-input--border-thickness) solid\n      var(--theme-input--border-color);\n    border-radius: var(--theme-input--border-radius);\n    padding: 0 0 0 $small-space;\n    box-shadow: var(--theme-inset-shadow-1) !important;\n\n    @include hover {\n      background-color: var(--theme-input--background--hover);\n      border-color: var(--theme-input--border-color--hover);\n    }\n\n    &:focus-within {\n      background-color: var(--theme-input--background--focus);\n      border-color: var(--theme-input--border-color--focus);\n      outline: 1px solid #119fff;\n      outline-offset: var(--theme-input--focus--outline-offset);\n    }\n  }\n\n  .select.readonly,\n  .select.disabled {\n    box-shadow: none !important;\n    border: none;\n    border-radius: 0;\n    cursor: pointer;\n\n    &,\n    &:hover,\n    &:active {\n      background-color: transparent !important;\n    }\n\n    &:focus,\n    &:focus-within,\n    &:focus-visible {\n      outline: none;\n    }\n\n    input:focus,\n    input:focus-visible {\n      outline: none;\n    }\n  }\n\n  .select.disabled {\n    border-bottom: var(--theme-input--border-thickness) solid\n      var(--theme-color-weak-bdr);\n\n    input {\n      color: var(--theme-color-weak-text);\n    }\n  }\n\n  .select.readonly {\n    border-bottom: var(--theme-input--border-thickness) solid\n      var(--theme-color-soft-bdr);\n\n    input {\n      color: var(--theme-color-std-text);\n    }\n  }\n\n  .hidden {\n    display: none !important;\n  }\n\n  .trigger {\n    display: flex;\n    align-items: center;\n    flex-grow: 1;\n    height: 100%;\n  }\n\n  .input-container {\n    display: flex;\n    position: relative;\n    align-items: flex-start;\n    width: 100%;\n    height: 100%;\n\n    .chips {\n      position: relative;\n      display: flex;\n      align-items: center;\n      flex-wrap: wrap;\n      height: 100%;\n      max-height: 3.5rem;\n      flex-grow: 1;\n      overflow-y: auto;\n\n      > ix-filter-chip {\n        margin: 0.1rem;\n      }\n    }\n\n    input {\n      @include ellipsis;\n      @include text-default;\n      background: transparent;\n      height: 1.75rem;\n      width: 100%;\n\n      &,\n      &:hover,\n      &:focus-visible {\n        border: none;\n        outline: none;\n      }\n\n      &::placeholder {\n        color: var(--theme-input-select-icon--color);\n      }\n\n      &.hide-placeholder::placeholder {\n        opacity: 0;\n      }\n    }\n  }\n\n  .dropdown-visible {\n    --ix-icon-button-color: var(--theme-color-dynamic--hover);\n  }\n\n  .add-item {\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    position: relative;\n    width: 100%;\n  }\n\n  .select-list-header {\n    @include ellipsis;\n    display: flex;\n    align-items: center;\n    height: $default-control-height;\n    color: var(--theme-select-list-item-hint--color);\n    margin: 0 $small-space 0 1rem;\n  }\n}\n","/*\n * SPDX-FileCopyrightText: 2023 Siemens AG\n *\n * SPDX-License-Identifier: MIT\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Prop,\n  State,\n  Watch,\n} from '@stencil/core';\nimport { IxSelectItemLabelChangeEvent } from '../select-item/events';\nimport { ArrowFocusController } from '../utils/focus';\nimport { OnListener } from '../utils/listener';\nimport { createMutationObserver } from '../utils/mutation-observer';\nimport { DropdownItemWrapper } from '../dropdown/dropdown-controller';\n\n@Component({\n  tag: 'ix-select',\n  styleUrl: 'select.scss',\n  shadow: true,\n})\nexport class Select {\n  @Element() hostElement!: HTMLIxSelectElement;\n\n  /**\n   * Indices of selected items.\n   * This corresponds to the value property of ix-select-items and therefor not necessarily the indices of the items in the list.\n   * @deprecated since 2.0.0. Use the `value` property instead.\n   */\n  @Prop({ mutable: true }) selectedIndices?: string | string[];\n\n  /**\n   * Current selected value.\n   * This corresponds to the value property of ix-select-items\n   * @since 2.0.0\n   */\n  @Prop({ mutable: true }) value?: string | string[];\n\n  /**\n   * Show clear button\n   */\n  @Prop() allowClear = false;\n\n  /**\n   * Selection mode\n   */\n  @Prop() mode: 'single' | 'multiple' = 'single';\n\n  /**\n   * Select is extendable\n   */\n  @Prop() editable = false;\n\n  /**\n   * If true the select will be in disabled state\n   */\n  @Prop() disabled = false;\n\n  /**\n   * If true the select will be in readonly mode\n   */\n  @Prop() readonly = false;\n\n  /**\n   * Input field placeholder\n   */\n  @Prop() i18nPlaceholder = 'Select an option';\n\n  /**\n   * Input field placeholder for editable select\n   */\n  @Prop() i18nPlaceholderEditable = 'Type of select option';\n\n  /**\n   * Select list header\n   */\n  @Prop() i18nSelectListHeader = 'Please select an option';\n\n  /**\n   * Hint inside of dropdown if no items where found with current filter text\n   *\n   * @since 1.5.0\n   */\n  @Prop() i18nNoMatches = 'No matches';\n\n  /**\n   * Hide list header\n   *\n   * @since 1.5.0\n   */\n  @Prop() hideListHeader = false;\n\n  /**\n   * Value changed\n   * @since 2.0.0\n   */\n  @Event() valueChange: EventEmitter<string | string[]>;\n\n  /**\n   * Item selection changed\n   * @deprecated since 2.0.0. Use `valueChange` instead.\n   */\n  @Event() itemSelectionChange: EventEmitter<string[]>;\n\n  /**\n   * Event dispatched whenever the text input changes.\n   *\n   * @since 2.0.0\n   */\n  @Event() inputChange: EventEmitter<string>;\n\n  /**\n   * Item added to selection\n   */\n  @Event() addItem: EventEmitter<string>;\n\n  @State() dropdownShow = false;\n  @State() selectedLabels: string[];\n  @State() dropdownWrapperRef!: HTMLElement;\n  @State() dropdownAnchor!: HTMLElement;\n  @State() isDropdownEmpty = false;\n  @State() navigationItem: DropdownItemWrapper;\n  @State() inputFilterText: string;\n  @State() inputValue: string;\n\n  private inputRef!: HTMLInputElement;\n  private dropdownRef!: HTMLIxDropdownElement;\n  private customItemsContainerRef!: HTMLDivElement;\n  private addItemRef!: HTMLIxDropdownItemElement;\n\n  private itemMutationObserver: MutationObserver;\n\n  private arrowFocusController: ArrowFocusController;\n  private focusControllerCallbackBind = this.focusDropdownItem.bind(this);\n\n  private itemObserver = createMutationObserver(() => {\n    this.arrowFocusController.items = this.visibleNonShadowItems;\n  });\n\n  get nonShadowItems() {\n    return Array.from(this.hostElement.querySelectorAll('ix-select-item'));\n  }\n\n  get visibleNonShadowItems() {\n    return this.nonShadowItems.filter(\n      (item) => !item.classList.contains('d-none')\n    );\n  }\n\n  get shadowItems() {\n    return Array.from(\n      this.hostElement.shadowRoot.querySelectorAll('ix-select-item')\n    );\n  }\n\n  get visibleShadowItems() {\n    return this.shadowItems.filter(\n      (item) => !item.classList.contains('d-none')\n    );\n  }\n\n  get items() {\n    return [...this.nonShadowItems, ...this.shadowItems];\n  }\n\n  get visibleItems() {\n    return this.items.filter((item) => !item.classList.contains('d-none'));\n  }\n\n  get selectedItems() {\n    return this.items.filter((item) => item.selected);\n  }\n\n  get addItemButton() {\n    return this.hostElement.shadowRoot.querySelector('.add-item');\n  }\n\n  get isSingleMode() {\n    return this.mode === 'single';\n  }\n\n  get isMultipleMode() {\n    return this.mode === 'multiple';\n  }\n\n  get isEveryDropdownItemHidden() {\n    return this.items.every((item) => item.classList.contains('d-none'));\n  }\n\n  @Watch('selectedIndices')\n  watchSelectedIndices(value: string | string[]) {\n    this.value = value;\n    this.updateSelection();\n  }\n\n  @Watch('value')\n  watchValue(value: string | string[]) {\n    this.selectedIndices = value;\n    this.updateSelection();\n  }\n\n  @Watch('dropdownShow')\n  watchDropdownShow(show: boolean) {\n    if (show) {\n      this.arrowFocusController = new ArrowFocusController(\n        this.visibleNonShadowItems,\n        this.dropdownRef,\n        this.focusControllerCallbackBind\n      );\n\n      this.arrowFocusController.wrap = !this.editable;\n\n      this.itemObserver.observe(this.dropdownRef, {\n        childList: true,\n        subtree: true,\n      });\n    } else {\n      this.arrowFocusController.disconnect();\n      this.arrowFocusController = undefined;\n      this.itemObserver.disconnect();\n    }\n  }\n\n  @Listen('itemClick')\n  onItemClicked(event: CustomEvent<string>) {\n    const newId = event.detail;\n    this.itemClick(newId);\n  }\n\n  private focusDropdownItem(index: number) {\n    this.navigationItem = undefined;\n\n    if (index < this.visibleNonShadowItems.length) {\n      const nestedDropdownItem =\n        this.visibleNonShadowItems[index]?.shadowRoot.querySelector(\n          'ix-dropdown-item'\n        );\n\n      requestAnimationFrame(() => {\n        nestedDropdownItem.shadowRoot.querySelector('button').focus();\n      });\n    }\n  }\n\n  private itemClick(newId: string) {\n    const oldValue = this.value;\n    const value = this.toggleValue(newId);\n    this.value = value;\n    const defaultPrevented = this.emitValueChange(value);\n\n    if (defaultPrevented) {\n      this.value = oldValue;\n      return;\n    }\n\n    this.updateSelection();\n  }\n\n  private emitAddItem(value: string) {\n    if (value === undefined || value.trim() === '') {\n      return false;\n    }\n\n    const { defaultPrevented } = this.addItem.emit(value);\n    if (defaultPrevented) {\n      return true;\n    }\n\n    const newItem = document.createElement('ix-select-item');\n    newItem.value = value;\n    newItem.label = value;\n\n    this.customItemsContainerRef.appendChild(newItem);\n\n    this.clearInput();\n    this.itemClick(value);\n\n    return false;\n  }\n\n  private toggleValue(itemValue: string) {\n    if (!this.isMultipleMode) {\n      return itemValue;\n    }\n\n    if (!this.value) {\n      return [itemValue];\n    }\n\n    let value = this.value;\n\n    if (!Array.isArray(value)) {\n      value = [value];\n    }\n\n    if (value.includes(itemValue)) {\n      return value.filter((value) => value !== itemValue);\n    } else {\n      return [...value, itemValue];\n    }\n  }\n\n  private updateSelection() {\n    let ids = [];\n\n    if (this.value) {\n      ids = Array.isArray(this.value) ? [...this.value] : [this.value];\n    }\n\n    this.items.forEach((item) => {\n      item.selected = ids.some((i) => {\n        if (typeof i !== typeof item.value) {\n          return i.toString() === item.value.toString();\n        } else {\n          return i === item.value;\n        }\n      });\n    });\n\n    this.selectedLabels = this.selectedItems.map((item) => item.label);\n\n    if (this.isSingleMode && this.selectedLabels?.length) {\n      this.inputValue = this.selectedLabels[0];\n      this.inputRef && (this.inputRef.value = this.inputValue);\n      return;\n    }\n\n    this.inputValue = null;\n  }\n\n  private emitValueChange(value: string | string[]) {\n    const { defaultPrevented } = this.valueChange.emit(value);\n\n    if (defaultPrevented) {\n      return true;\n    }\n\n    if (!value) {\n      this.itemSelectionChange.emit(null);\n    } else {\n      this.itemSelectionChange.emit(Array.isArray(value) ? value : [value]);\n    }\n\n    return false;\n  }\n\n  componentDidLoad() {\n    this.inputRef.addEventListener('input', () => {\n      this.dropdownShow = true;\n      this.inputChange.emit(this.inputRef.value);\n    });\n  }\n\n  componentWillLoad() {\n    if (this.selectedIndices && !this.value) {\n      this.value = this.selectedIndices;\n    }\n\n    this.updateSelection();\n  }\n\n  @Listen('ix-select-item:labelChange')\n  onLabelChange(event: IxSelectItemLabelChangeEvent) {\n    event.preventDefault();\n    event.stopImmediatePropagation();\n    this.updateSelection();\n  }\n\n  disconnectedCallback() {\n    if (this.itemMutationObserver) {\n      this.itemMutationObserver.disconnect();\n    }\n  }\n\n  private itemExists(item: string) {\n    return this.items.find((i) => i.label === item);\n  }\n\n  private dropdownVisibilityChanged(event: CustomEvent<boolean>) {\n    this.dropdownShow = event.detail;\n\n    if (event.detail) {\n      this.inputRef.focus();\n      this.inputRef.select();\n\n      this.removeHiddenFromItems();\n      this.isDropdownEmpty = this.isEveryDropdownItemHidden;\n    } else {\n      this.navigationItem = undefined;\n      this.updateSelection();\n      this.inputFilterText = '';\n    }\n  }\n\n  @OnListener<Select>('keydown', (self) => self.dropdownShow)\n  async onKeyDown(event: KeyboardEvent) {\n    if (event.code === 'ArrowDown' || event.code === 'ArrowUp') {\n      await this.onArrowNavigation(event, event.code);\n    }\n\n    if (!this.dropdownShow) {\n      return;\n    }\n\n    if (event.code === 'Enter' || event.code === 'NumpadEnter') {\n      await this.onEnterNavigation();\n    }\n\n    if (event.code === 'Escape') {\n      this.dropdownShow = false;\n    }\n  }\n\n  private async onEnterNavigation() {\n    if (this.isMultipleMode) {\n      return;\n    }\n\n    let item: HTMLIxSelectItemElement;\n\n    if (this.editable && !this.itemExists(this.inputFilterText)) {\n      const defaultPrevented = this.emitAddItem(this.inputFilterText);\n      if (defaultPrevented) {\n        return;\n      }\n\n      item = this.items[this.items.length - 1];\n    }\n\n    if (item) {\n      item.onItemClick();\n    }\n\n    await this.dropdownRef?.updatePosition();\n\n    if (this.isSingleMode && !this.editable) {\n      this.dropdownShow = false;\n    }\n  }\n\n  private async onArrowNavigation(\n    event: KeyboardEvent,\n    key: 'ArrowDown' | 'ArrowUp'\n  ) {\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.dropdownShow = true;\n\n    if (!this.navigationItem && document.activeElement === this.hostElement) {\n      if (this.visibleItems.length) {\n        this.applyFocusTo(this.visibleItems.shift());\n      } else if (this.isAddItemVisible()) {\n        this.focusAddItemButton();\n      }\n      return;\n    }\n\n    const moveUp = key === 'ArrowUp';\n    const indexNonShadow = this.visibleNonShadowItems.indexOf(\n      document.activeElement as any\n    );\n\n    // Slotted select items\n    if (indexNonShadow === 0) {\n      if (!this.visibleShadowItems.length && this.isAddItemVisible()) {\n        this.focusAddItemButton();\n      } else {\n        this.applyFocusTo(this.visibleShadowItems.pop());\n      }\n      return;\n    } else if (\n      indexNonShadow !== -1 &&\n      indexNonShadow === this.visibleNonShadowItems.length - 1\n    ) {\n      if (this.visibleShadowItems.length) {\n        this.applyFocusTo(this.visibleShadowItems.shift());\n      } else if (this.isAddItemVisible()) {\n        this.focusAddItemButton();\n      }\n      return;\n    }\n\n    if (\n      this.isAddItemVisible() &&\n      this.addItemRef.contains(\n        await this.navigationItem.getDropdownItemElement()\n      )\n    ) {\n      if (moveUp) {\n        this.applyFocusTo(this.visibleItems.pop());\n      } else {\n        if (this.visibleItems.length) {\n          this.applyFocusTo(this.visibleItems.shift());\n        }\n      }\n      return;\n    }\n\n    // Custom select items\n    const indexShadow = this.visibleShadowItems.indexOf(\n      this.navigationItem as any\n    );\n\n    if (moveUp) {\n      if (indexShadow === 0) {\n        if (this.visibleNonShadowItems.length) {\n          this.applyFocusTo(this.visibleNonShadowItems.pop());\n        } else if (this.isAddItemVisible()) {\n          this.focusAddItemButton();\n        }\n      } else {\n        this.applyFocusTo(this.visibleShadowItems[indexShadow - 1]);\n      }\n    } else {\n      if (indexShadow === this.visibleShadowItems.length - 1) {\n        if (this.isAddItemVisible()) {\n          this.focusAddItemButton();\n        } else {\n          this.applyFocusTo(this.visibleItems.shift());\n        }\n      } else {\n        this.applyFocusTo(this.visibleShadowItems[indexShadow + 1]);\n      }\n    }\n  }\n\n  private applyFocusTo(element: HTMLIxSelectItemElement) {\n    if (!element) {\n      return;\n    }\n\n    this.navigationItem = element;\n\n    setTimeout(() => {\n      element.shadowRoot\n        .querySelector('ix-dropdown-item')\n        .shadowRoot.querySelector('button')\n        .focus();\n    });\n  }\n\n  private focusAddItemButton() {\n    if (this.addItemButton) {\n      this.addItemButton.shadowRoot.querySelector('button').focus();\n      this.navigationItem = this.addItemRef;\n    }\n  }\n\n  private filterItemsWithTypeahead() {\n    this.inputFilterText = this.inputRef.value;\n\n    if (this.isSingleMode && this.inputFilterText === this.selectedLabels[0]) {\n      return;\n    }\n\n    if (this.inputFilterText) {\n      this.items.forEach((item) => {\n        item.classList.remove('d-none');\n        if (\n          !item.label.toLowerCase().includes(this.inputFilterText.toLowerCase())\n        ) {\n          item.classList.add('d-none');\n        }\n      });\n    } else {\n      this.removeHiddenFromItems();\n    }\n\n    if (this.arrowFocusController) {\n      this.arrowFocusController.items = this.visibleNonShadowItems;\n    }\n\n    this.isDropdownEmpty = this.isEveryDropdownItemHidden;\n  }\n\n  private removeHiddenFromItems() {\n    this.items.forEach((item) => {\n      item.classList.remove('d-none');\n    });\n  }\n\n  private clearInput() {\n    this.inputRef.value = '';\n    this.inputFilterText = '';\n  }\n\n  private clear() {\n    this.clearInput();\n    this.selectedLabels = [];\n    this.value = [];\n    this.valueChange.emit(null);\n    this.dropdownShow = false;\n  }\n\n  private onInputBlur(e) {\n    if (this.editable) {\n      return;\n    }\n\n    if (this.isSingleMode) {\n      return;\n    }\n\n    if (!this.dropdownShow && this.mode !== 'multiple') {\n      e.target['value'] = this.selectedLabels;\n    }\n  }\n\n  private placeholderValue() {\n    if (this.disabled) {\n      return '';\n    }\n\n    if (this.readonly) {\n      return '';\n    }\n\n    if (this.editable) {\n      return this.i18nPlaceholderEditable;\n    }\n\n    return this.i18nPlaceholder;\n  }\n\n  private isAddItemVisible() {\n    return (\n      !this.itemExists(this.inputFilterText) &&\n      this.editable &&\n      this.inputFilterText\n    );\n  }\n\n  render() {\n    return (\n      <Host>\n        <div\n          class={{\n            select: true,\n            disabled: this.disabled,\n            readonly: this.readonly,\n          }}\n          ref={(ref) => {\n            this.dropdownAnchor = ref;\n            if (!this.editable) this.dropdownWrapperRef = ref;\n          }}\n        >\n          <div class=\"input-container\">\n            <div class=\"chips\">\n              {this.isMultipleMode\n                ? this.selectedItems?.map((item) => (\n                    <ix-filter-chip\n                      disabled={this.disabled || this.readonly}\n                      key={item.value}\n                      onCloseClick={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        this.itemClick(item.value);\n                      }}\n                    >\n                      {item.label}\n                    </ix-filter-chip>\n                  ))\n                : ''}\n              <div class=\"trigger\">\n                <input\n                  autocomplete=\"off\"\n                  data-testid=\"input\"\n                  disabled={this.disabled}\n                  readOnly={this.readonly}\n                  type=\"text\"\n                  class={{\n                    'allow-clear':\n                      this.allowClear && !!this.selectedLabels?.length,\n                  }}\n                  placeholder={this.placeholderValue()}\n                  value={this.inputValue}\n                  ref={(ref) => (this.inputRef = ref)}\n                  onBlur={(e) => this.onInputBlur(e)}\n                  onFocus={() => {\n                    this.navigationItem = undefined;\n                  }}\n                  onInput={() => this.filterItemsWithTypeahead()}\n                  onKeyDown={(e) => this.onKeyDown(e)}\n                />\n                {this.allowClear &&\n                (this.selectedLabels?.length || this.inputFilterText) ? (\n                  <ix-icon-button\n                    class=\"clear\"\n                    icon={'clear'}\n                    ghost\n                    oval\n                    size=\"16\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                      this.clear();\n                    }}\n                  />\n                ) : null}\n                {this.disabled || this.readonly ? null : (\n                  <ix-icon-button\n                    data-select-dropdown\n                    class={{ 'dropdown-visible': this.dropdownShow }}\n                    icon=\"chevron-down-small\"\n                    ghost\n                    ref={(ref) => {\n                      if (this.editable) this.dropdownWrapperRef = ref;\n                    }}\n                  ></ix-icon-button>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n        <ix-dropdown\n          ref={(ref) => (this.dropdownRef = ref)}\n          show={this.dropdownShow}\n          closeBehavior={this.isMultipleMode ? 'outside' : 'both'}\n          class={{\n            'd-none': this.disabled || this.readonly,\n          }}\n          anchor={this.dropdownAnchor}\n          trigger={this.dropdownWrapperRef}\n          onShowChanged={(e) => this.dropdownVisibilityChanged(e)}\n          placement=\"bottom-start\"\n          overwriteDropdownStyle={async () => {\n            return {\n              minWidth: `${this.hostElement.clientWidth}px`,\n            };\n          }}\n        >\n          <div\n            class={{\n              'select-list-header': true,\n              hidden: this.hideListHeader || this.isDropdownEmpty,\n            }}\n            title={this.i18nSelectListHeader}\n            onClick={(e) => e.preventDefault()}\n          >\n            {this.i18nSelectListHeader}\n          </div>\n          <slot></slot>\n          <div\n            ref={(ref) => (this.customItemsContainerRef = ref)}\n            class=\"d-contents\"\n          ></div>\n          {this.isAddItemVisible() ? (\n            <ix-dropdown-item\n              data-testid=\"add-item\"\n              icon={'plus'}\n              class={{\n                'add-item': true,\n              }}\n              label={this.inputFilterText}\n              onItemClick={(e) => {\n                e.preventDefault();\n                if (this.emitAddItem(this.inputFilterText)) {\n                  e.stopPropagation();\n                }\n              }}\n              onFocus={() => (this.navigationItem = this.addItemRef)}\n              ref={(ref) => {\n                this.addItemRef = ref;\n              }}\n            ></ix-dropdown-item>\n          ) : null}\n          {this.isDropdownEmpty && !this.editable ? (\n            <div class=\"select-list-header\">{this.i18nNoMatches}</div>\n          ) : (\n            ''\n          )}\n        </ix-dropdown>\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}